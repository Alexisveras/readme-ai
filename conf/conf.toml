# OpenAI API
[api]
api_key = "<OPENAI-API-KEY>"
engine = "text-davinci-003"
prompt_intro = """Given the GiitHub project {} url, write a short summary of the codebase's capabilities."""

# GitHub Repository
[github]
url = "https://github.com/GokuMohandas/mlops-course" #"https://github.com/eli64s/readme-ai" #

# File paths and directories
[paths]
badges = "conf/badges.json"
docs = "docs/raw_data.csv"
md = "docs/README.md"

# Markdown template code
[md]
head = """\n<div align="center">
<h1 align="center">
<img src="https://raw.githubusercontent.com/PKief/vscode-material-icon-theme/ec559a9f6bfd399b82bb44393651661b08aaf7ba/icons/folder-markdown-open.svg" width="100" />
<br>
{}
</h1>
\n> <h3 align="center">
>
> `[üìå  INSERT-PROJECT-SUMMARY]`
>
> </h3>
> <h3 align="center">üöÄ Developed using OpenAI's language model API and the software tools below.</h3>
> <p align="center">
> {}
> </p>
\n</div>
\n---
"""

toc = """
\n## üì¶ Table of Contents

- [üì¶ Table of Contents](#-table-of-contents)
- [üëã Introdcution](#-introdcution)
- [üîÆ Features](#-features)
- [‚öôÔ∏è Project Structure](#project-structure)
- [üß© Modules](#modules)
- [üèéüí® Getting Started](#-getting-started)
- [üó∫ Roadmap](#-roadmap)
- [ü§ù Contributing](#-contributing)
- [ü™™ License](#-license)
- [üì´ Contact](#-contact)
- [üôè Acknowledgments](#-acknowledgments)
\n---
"""

body = """
\n## üëã Introduction
\n{}
\n## üîÆ Feautres
\n> `[üìå  INSERT-DESCRIPTION]`
"""

modules = """\n---
\n<img src="https://raw.githubusercontent.com/PKief/vscode-material-icon-theme/ec559a9f6bfd399b82bb44393651661b08aaf7ba/icons/folder-src-open.svg" width="80" />
\n## üß© Modules\n
"""
dropdown = """\n<details closed><summary>{}</summary>\n\n{}\n\n</details>"""

tree = """\n---
\n<img src="https://raw.githubusercontent.com/PKief/vscode-material-icon-theme/ec559a9f6bfd399b82bb44393651661b08aaf7ba/icons/folder-github-open.svg" width="80" />
\n## ‚öôÔ∏è Project Structure
"""

setup = """<hr>\n
## üèéüí® Getting Started

### ‚úÖ Prerequisites
\nBefore you begin, ensure that you have the following prerequisites installed:
- `[üìå  INSERT-PREREQUISITES-IF-NEEDED]`

### üíª Installation
\n1. Clone the {name} repository:
```sh\ngit clone {url}\n```
\n2. Change to the project directory:
```sh\ncd {name}\n```
\n3. Install the dependencies:
```sh\n{install}\n```

### ü§ñ Running {name}
```sh\n{running}\n```

### üß™ Running Tests
```sh\n# INSERT-HOW-TO-RUN-UNIT-TESTS\n```
\n---

## üó∫ Roadmap

- [X] `[üìå  INSERT-TASK-COMPLETE]`
- [ ] `[üìå  INSERT-TASK-COMPLETE]`
- [ ] `[üìå  INSERT-TASK-COMPLETE]`
\n---

## ü§ù Contributing

Contributions are always welcome! Please follow these steps:

1. Fork the project repository. This creates a copy of the project on your account that you can modify without affecting the original project.
2. Clone the forked repository to your local machine using a Git client like Git or GitHub Desktop.
3. Create a new branch with a descriptive name (e.g., `new-feature-branch` or `bugfix-issue-123`).
   ```sh
   git checkout -b new-feature-branch
   ```
4. Make changes to the project's codebase.
5. Commit your changes to your local branch with a clear commit message that explains the changes you've made.
   ```sh
   git commit -m 'Implemented new feature.'
   ```
6. Push your changes to your forked repository on GitHub using the following command
   ```sh
   git push origin new-feature-branch
   ```
7. Create a pull request to the original repository.

Open a new pull request to the original project repository. In the pull request, describe the changes you've made and why they're necessary. 
The project maintainers will review your changes and provide feedback or merge them into the main branch.
\n---

## ü™™ License

This project is licensed under the `[üìå  INSERT-LICENSE-TYPE]` License. See the [LICENSE](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-license-to-a-repository) file for additional info.

\n---

## üì´ Contact

If you have any questions or concerns, please open an issue on GitHub or contact the repo owner at `[üìå  your-email@example.com]`

\n---

## üôè Acknowledgments
\n `[üìå  INSERT-DESCRIPTION]`
\n---
"""

# Map file extensions to programming languages.
[extensions]
    ".asm" = "Assembly"
    ".c" = "C"
    ".cfg" = "CFG"
    ".cfg.lua" = "L√ñVE2D"
    ".cmake" = "CMake"
    ".coffee" = "CoffeeScript"
    ".cpp" = "C++"
    ".cs" = "C#"
    ".csproj" = "XML"
    ".dart" = "Dart"
    ".fs" = "F#"
    ".fsi" = "F#"
    ".go" = "Go"
    ".groovy" = "Groovy"
    ".h" = "C"
    ".hpp" = "C++"
    ".hs" = "Haskell"
    ".html" = "HTML"
    ".ipynb" = "Jupyter Notebook"
    ".java" = "Java"
    ".jl" = "Julia"
    ".js" = "JavaScript"
    ".json" = "JSON"
    ".kt" = "Kotlin"
    ".lua" = "Lua"
    ".m" = "Objective-C"
    ".md" = "Markdown"
    ".mm" = "Objective-C++"
    ".php" = "PHP"
    ".pl" = "Perl"
    ".ps1" = "PowerShell"
    ".psm1" = "PowerShell"
    ".py" = "Python"
    ".r" = "R"
    ".rb" = "Ruby"
    ".rs" = "Rust"
    ".rst" = "reStructuredText"
    ".s" = "Assembly"
    ".scala" = "Scala"
    ".sh" = "Shell"
    ".sql" = "SQL"
    ".svg" = "SVG"
    ".swift" = "Swift"
    ".swiftdeps" = "Swift"
    ".tex" = "TeX"
    ".toml" = "TOML"
    ".ts" = "TypeScript"
    ".tsx" = "TypeScript"
    ".txt" = "Text"
    ".v" = "Verilog"
    ".vh" = "Verilog"
    ".xml" = "XML"
    ".yaml" = "YAML"
    ".yml" = "YAML"

# Instruction guide for installation and running programming languages
[language_instructions]
ABAP = ["abap build", "abap run"]
ActionScript = ["mxmlc main.as", "flashplayer main.swf"]
Ada = ["gnatmake main.adb", "./main"]
Apex = ["sfdx force:source:deploy -p force-app/main/default", "sfdx force:apex:execute -f main.apex"]
Assembly = ["nasm -f elf64 main.asm && ld main.o -o myapp", "./myapp"]
COBOL = ["cobc -x -o myapp main.cob", "./myapp"]
C = ["gcc -o myapp main.c", "./myapp"]
CPlusPlus = ["g++ -o myapp main.cpp", "./myapp"]
CSharp = ["dotnet build", "dotnet run"]
CoffeeScript = ["npm install", "coffee main.coffee"]
Crystal = ["shards install", "./main"]
D = ["dmd main.d", "./main"]
Dart = ["pub get", "dart main.dart"]
Delphi = ["dcc32 main.dpr", "main.exe"]
Elixir = ["mix deps.get", "mix run main.exs"]
FS = ["dotnet build", "dotnet run"]
Forth = ["gforth main.fs"]
Go = ["go build -o myapp", "./myapp"]
Groovy = ["grape install", "groovy main.groovy"]
Haskell = ["ghc -o myapp main.hs", "./myapp"]
Java = ["mvn clean install", "java -jar target/myapp.jar"]
JavaScript = ["npm install", "npm start"]
Julia = ["julia --project -e 'import Pkg; Pkg.instantiate()'", "julia main.jl"]
Kotlin = ["gradle build", "java -jar build/libs/myapp.jar"]
Lua = ["luarocks install --only-deps myapp", "lua main.lua"]
MATLAB = ["matlab -r main.m"]
Objective-C = ["gcc -framework Foundation main.m -o myapp", "./myapp"]
CPP = ["g++ -o myapp main.mm", "./myapp"]
ObjectScript = ["zpm install", "do ##class(User.MyClass).Main()"]
Perl = ["cpanm --installdeps .", "perl main.pl"]
Perl6 = ["zef install .", "perl6 main.p6"]
PHP = ["composer install", "php main.php"]
PowerShell = ["pwsh main.ps1"]
Prolog = ["swipl -g main -t halt -q main.pl"]
Python = ["pip install -r requirements.txt", "python main.py"]
R = ["Rscript install.R", "Rscript main.R"]
Raku = ["zef install .", "raku main.raku"]
Ruby = ["bundle install", "ruby main.rb"]
Rust = ["cargo build", "cargo run"]
Scala = ["sbt compile", "sbt run"]
Scheme = ["csi -s main.scm"]
Shell = ["chmod +x main.sh", "./main.sh"]
Swift = ["swift build", ".build/debug/myapp"]
TypeScript = ["npm install", "npm run build && node dist/main.js"]
VBScript = ["cscript main.vbs"]
VisualBasic = ["dotnet build", "dotnet run"]