file,summary
week_2_hydra_config/model.py,"This Python script is for a ColaModel class which is a subclass of pytorch_lightning's LightningModule class. It imports various libraries such as torch, wandb, hydra, numpy, pandas, torchmetrics, pytorch_lightning, and transformers. It also imports OmegaConf, DictConfig, sklearn's confusion_matrix, matplotlib's pyplot, and seaborn. The class has an __init__ method which"
week_2_hydra_config/train.py,"This Python script imports the necessary libraries for a sentiment analysis task, such as torch, hydra, wandb, and logging. It also imports pandas, pytorch_lightning, and omegaconf. It then defines a SamplesVisualisationLogger class, which is used to log wrong predictions. The main function is then defined, which sets up the data module, model, callbacks, and logger. Finally, the trainer is used to fit the model to the data"
week_2_hydra_config/inference.py,"This Python script defines a class called ColaPredictor which takes a model path as an argument. It then loads the model from the checkpoint, sets it to evaluation mode, freezes it, and creates a DataModule object. The predict() method takes a text string as an argument, tokenizes it, and passes it to the model. The model then returns logits which are converted to scores using a Softmax function. Finally, the scores and labels are combined into a list of diction"
week_2_hydra_config/data.py,"This Python script is a DataModule class that is used to prepare data for a machine learning model. It imports the torch, datasets, and pytorch_lightning libraries, as well as the load_dataset and AutoTokenizer functions from the transformers library. The class takes in a model name, batch size, and max length as parameters and sets up the tokenizer. The prepare_data function loads the cola dataset from the glue dataset. The tokenize_data"
week_4_onnx/inference_onnx.py,"This Python script is a class for a ColaONNXPredictor which uses an ONNX model to predict the acceptability of a sentence. It imports the necessary libraries, defines the class, and initializes the class with the model path. The predict method takes in a text, tokenizes it, runs the ONNX model, and returns a list of predictions with labels and scores. The main section tests the predictor with a single sentence and then with a list of sentences."
week_4_onnx/model.py,"This Python script is for a ColaModel class which is a subclass of pytorch_lightning's LightningModule class. It imports various libraries such as torch, wandb, hydra, numpy, pandas, torchmetrics, pytorch_lightning, and transformers. It also imports OmegaConf, DictConfig, sklearn's confusion_matrix, matplotlib's pyplot, and seaborn. The class has an __init__ method which"
week_4_onnx/utils.py,This Python script is a decorator for timing functions. It uses the time module and the functools module to measure the time it takes for a function to execute. It prints out the name of the function and the time it took to execute. It then returns the result of the function.
week_4_onnx/train.py,"This Python script imports the necessary libraries for a sentiment analysis task, such as torch, hydra, wandb, and logging. It also imports pandas, pytorch_lightning, and omegaconf. It then defines a SamplesVisualisationLogger class, which is used to log the wrong predictions of the model. The main function is then defined, which sets up the data module, model, and trainer. The trainer is configured with a ModelCheckpoint, Samples"
week_4_onnx/inference.py,"This Python script is a class for predicting the acceptability of a sentence using a pre-trained ColaModel. It initializes the model, processor, and softmax, and labels. It also has a predict method which takes in a sentence, tokenizes it, and returns a list of predictions with labels and scores. There is also a main method which tests the predictor with a single sentence and multiple sentences."
week_4_onnx/convert_model_to_onnx.py,"This Python script imports the torch, hydra, and logging libraries, as well as the OmegaConf library. It then sets up a logger and defines a function, convert_model, which takes a configuration file as an argument. The function loads a pre-trained model from a checkpoint, prepares data, and sets up a data module. It then creates an input batch and sample, and exports the model in ONNX format. Finally, it prints a message indicating that the model has been converted"
week_4_onnx/data.py,"This Python script is a DataModule class that is used to prepare data for a PyTorch Lightning model. It initializes a tokenizer from a pretrained model, loads a dataset, tokenizes the data, and sets up the data in the correct format for the model. It also provides train and validation dataloaders for the model. Finally, it prints the shape of the input_ids of the first batch of the training dataloader."
week_0_project_setup/model.py,"This Python script defines a ColaModel class which is a subclass of the pytorch_lightning pl.LightningModule class. The class initializes a BERT model from the transformers library and a linear layer with two output classes. The forward method takes input_ids and attention_mask as inputs and returns logits. The training_step and validation_step methods define the loss and accuracy metrics for the model. Finally, the configure_optimizers method sets the optimizer"
week_0_project_setup/train.py,"This Python script imports the torch, pytorch_lightning, ModelCheckpoint, and EarlyStopping modules. It then creates a DataModule and ColaModel object, and sets up a ModelCheckpoint and EarlyStopping callback. Finally, it creates a Trainer object and fits the ColaModel to the ColaData."
week_0_project_setup/inference.py,"This Python script defines a class called ColaPredictor which takes a model path as an argument. It then loads the model from the checkpoint, sets it to evaluation mode, freezes it, and creates a DataModule object. The predict() method takes a text string as an argument, tokenizes it, and passes it to the model. The model then returns logits which are converted to a list of scores and labels. Finally, the list of scores and labels are returned as a prediction"
week_0_project_setup/data.py,"This Python script is a data module for a PyTorch Lightning project. It initializes a tokenizer from a pre-trained model, loads a dataset, tokenizes the data, and sets up the data for training and validation. It also prints the shape of the input_ids of the first batch of the training data."
week_9_monitoring/inference_onnx.py,"This Python script is a class for predicting the acceptability of a sentence using an ONNX model. It imports the necessary libraries, initializes the class with the model path, and has a predict method that takes in a sentence, tokenizes it, runs it through the ONNX model, and returns a prediction with the label and score. It also has a main method that tests the predictor with a single sentence and then tests it with 10 sentences."
week_9_monitoring/lambda_handler.py,This Python script is a Lambda wrapper for a ColaONNXPredictor model. It takes in a sentence as input and returns a response with the linguistic acceptability of the sentence. It also sets up logging for debugging purposes.
week_9_monitoring/model.py,"This Python script is for a ColaModel class which is a subclass of pytorch_lightning's LightningModule class. It imports various libraries such as torch, wandb, hydra, numpy, pandas, torchmetrics, pytorch_lightning, and transformers. It also imports OmegaConf, DictConfig, sklearn's confusion_matrix, matplotlib's pyplot, and seaborn. The class has an __init__ method which"
week_9_monitoring/utils.py,This Python script is a decorator for timing functions. It uses the time module and the functools module to measure the time it takes for a function to execute. It prints out the name of the function and the time it took to execute. It then returns the result of the function.
week_9_monitoring/train.py,"This Python script imports the necessary libraries for a sentiment analysis task, such as torch, hydra, wandb, and logging. It also imports pandas, pytorch_lightning, and omegaconf. It then defines a SamplesVisualisationLogger class, which is used to log the wrong predictions of the model. The main function is then defined, which sets up the data module, model, and trainer. The trainer is configured with a ModelCheckpoint, Samples"
week_9_monitoring/app.py,"This Python script creates a web application using the FastAPI library. It also imports a ColaONNXPredictor class from the inference_onnx module. The application has two routes, one for the home page and one for making predictions. The prediction route takes a string as an argument and returns the result of the prediction made by the ColaONNXPredictor class using the model.onnx file."
week_9_monitoring/inference.py,"This Python script is a class for predicting the acceptability of a sentence using a pre-trained ColaModel. It initializes the model, processor, and softmax, and labels. It also has a predict method which takes in a sentence, tokenizes it, and returns a list of predictions with labels and scores. There is also a main method which tests the predictor with a single sentence and multiple sentences."
week_9_monitoring/convert_model_to_onnx.py,"This Python script imports the torch, hydra, and logging libraries, as well as the OmegaConf library. It then sets up a logger and defines a function, convert_model, which takes a configuration file as an argument. The function loads a pre-trained model from a checkpoint, prepares data, and sets up a data module. It then creates an input batch and sample, and exports the model in ONNX format. Finally, it prints a message indicating that the model has been converted"
week_9_monitoring/data.py,"This Python script is a DataModule class that is used to prepare data for a PyTorch Lightning model. It initializes a tokenizer from a pretrained model, loads a dataset, tokenizes the data, and sets up the data in the correct format for the model. It also provides train and validation dataloaders for the model. Finally, it prints the shape of the input_ids of the first batch of the training dataloader."
week_9_monitoring/parse_json.py,"This code imports the json library and reads the contents of a file called creds.txt. It then prints the contents of the file, evaluates the contents, and prints the evaluated contents. Finally, it writes the evaluated contents to a file called test.json."
week_8_serverless/inference_onnx.py,"This Python script is a class for predicting the acceptability of a sentence using an ONNX model. It imports the necessary libraries, defines the class, and initializes the class with the model path. The predict() method takes in a sentence, tokenizes it, runs it through the ONNX model, and returns a list of predictions with labels and scores. The main section of the script tests the predictor with a single sentence and then with a list of sentences."
week_8_serverless/lambda_handler.py,"This Python script is a Lambda wrapper for a ColaONNXPredictor model. It imports the ColaONNXPredictor class from inference_onnx and creates an instance of it with the model.onnx file. The lambda_handler function takes in an event and context and checks if the event contains a resource key. If it does, it loads the body of the event, prints the input sentence, and returns a response with the prediction from the inf"
week_8_serverless/model.py,"This Python script is for a ColaModel class which is a subclass of pytorch_lightning's LightningModule class. It imports various libraries such as torch, wandb, hydra, numpy, pandas, torchmetrics, pytorch_lightning, and transformers. It also imports OmegaConf, DictConfig, sklearn's confusion_matrix, matplotlib's pyplot, and seaborn. The class has an __init__ method which"
week_8_serverless/utils.py,This Python script is a decorator for timing functions. It uses the time module and the functools module to measure the time it takes for a function to execute. It prints out the name of the function and the time it took to execute. It then returns the result of the function.
week_8_serverless/train.py,"This Python script imports the necessary libraries for a sentiment analysis task, such as torch, hydra, wandb, and logging. It also imports pandas, pytorch_lightning, and omegaconf. It then defines a SamplesVisualisationLogger class, which is used to log the wrong predictions of the model. The main function is then defined, which sets up the data module, model, and trainer. The trainer is configured with a ModelCheckpoint, Samples"
week_8_serverless/app.py,"This Python script creates a web application using the FastAPI library. It also imports a ColaONNXPredictor class from the inference_onnx module. The application has two routes, one for the home page and one for making predictions. The prediction route takes a string as an argument and uses the predictor object to make a prediction based on the string. The result of the prediction is then returned."
week_8_serverless/inference.py,"This Python script is a class for predicting the acceptability of a sentence using a pre-trained ColaModel. It initializes the model, processor, and softmax, and labels. It also has a predict method which takes in a sentence, tokenizes it, and returns a list of predictions with labels and scores. The main section tests the predictor with a single sentence and then with a list of sentences."
week_8_serverless/convert_model_to_onnx.py,"This Python script imports the torch, hydra, and logging libraries, as well as the OmegaConf library. It then sets up a logger and defines a function, convert_model, which takes a configuration file as an argument. The function loads a pre-trained model from a checkpoint, prepares data, and sets up a data module. It then creates an input batch and sample, and exports the model in ONNX format. Finally, it prints a message indicating that the model has been converted"
week_8_serverless/data.py,"This Python script is a DataModule class that is used to prepare data for a PyTorch Lightning model. It initializes a tokenizer from a pretrained model, loads a dataset, tokenizes the data, and sets up the data in the correct format for training and validation. It also provides a train_dataloader and val_dataloader methods to return the data in the form of a DataLoader. Finally, it prints the shape of the input_ids of"
week_8_serverless/parse_json.py,"This code imports the json library and reads the contents of a file called creds.txt. It then prints the contents of the file, evaluates the contents, and prints the evaluated contents. Finally, it writes the evaluated contents to a file called test.json."
week_5_docker/inference_onnx.py,"This Python script is a class for predicting the acceptability of a sentence using an ONNX model. It imports the necessary libraries, defines the class, and initializes the class with the model path. The predict() method takes in a sentence, tokenizes it, runs it through the ONNX model, and returns a list of predictions with labels and scores. The main section of the script tests the predictor with a single sentence and then with a list of sentences."
week_5_docker/model.py,"This Python script is for a ColaModel class which is a subclass of pytorch_lightning's LightningModule class. It imports various libraries such as torch, wandb, hydra, numpy, pandas, torchmetrics, pytorch_lightning, and transformers. It also imports OmegaConf, DictConfig, sklearn's confusion_matrix, matplotlib's pyplot, and seaborn. The class has an __init__ method which"
week_5_docker/utils.py,This Python script is a decorator for timing functions. It uses the time module and the functools module to measure the time it takes for a function to execute. It prints out the name of the function and the time it took to execute. It then returns the result of the function.
week_5_docker/train.py,"This Python script imports the necessary libraries for a sentiment analysis task, such as torch, hydra, wandb, and logging. It also imports pandas, pytorch_lightning, and omegaconf. It then defines a SamplesVisualisationLogger class, which is used to log the wrong predictions of the model. The main function is then defined, which sets up the data module, model, and trainer. The trainer is configured with a ModelCheckpoint, Samples"
week_5_docker/app.py,"This Python script creates a web application using the FastAPI library. It also imports a ColaONNXPredictor class from the inference_onnx module. The application has two routes, one for the home page and one for making predictions. The prediction route takes a string as an argument and uses the predictor object to make a prediction based on the string. The result of the prediction is then returned."
week_5_docker/inference.py,"This Python script is a class for predicting the acceptability of a sentence using a pre-trained ColaModel. It initializes the model, processor, and softmax, and labels. It also has a predict method which takes in a sentence, tokenizes it, and returns a list of predictions with labels and scores. There is also a main method which tests the predictor with a single sentence and multiple sentences."
week_5_docker/convert_model_to_onnx.py,"This Python script imports the torch, hydra, and logging libraries, as well as the OmegaConf library. It then sets up a logger and defines a function, convert_model, which takes a configuration file as an argument. The function loads a pre-trained model from a checkpoint, prepares data, and sets up a data module. It then creates an input batch and sample, and exports the model in ONNX format. Finally, it prints a message indicating that the model has been converted"
week_5_docker/data.py,"This Python script is a DataModule class that is used to prepare data for a PyTorch Lightning model. It initializes a tokenizer from a pretrained model, loads a dataset, tokenizes the data, and sets up the data in the correct format for training and validation. It also provides a train_dataloader and val_dataloader methods to return the data in the form of a DataLoader. Finally, it prints the shape of the input_ids of"
week_3_dvc/model.py,"This Python script is for a ColaModel class which is a subclass of pytorch_lightning's LightningModule class. It imports various libraries such as torch, wandb, hydra, numpy, pandas, torchmetrics, pytorch_lightning, and transformers. It also imports OmegaConf, DictConfig, sklearn's confusion_matrix, matplotlib's pyplot, and seaborn. The class has an __init__ method which"
week_3_dvc/train.py,"This Python script imports the necessary libraries for a sentiment analysis task, such as torch, hydra, wandb, and logging. It also imports pandas, pytorch_lightning, and omegaconf. It then defines a SamplesVisualisationLogger class, which is used to log the wrong predictions of the model. The main function is then defined, which sets up the data module, model, and trainer. The trainer is configured with a ModelCheckpoint, Samples"
week_3_dvc/inference.py,"This Python script defines a class called ColaPredictor which is used to predict whether a sentence is acceptable or unacceptable. It initializes the model, processor, and softmax, and labels. The predict() method takes in a text and tokenizes it, then passes it to the model to get logits. The logits are then passed to the softmax to get scores, which are then used to create a list of predictions with labels and scores."
week_3_dvc/data.py,"This Python script is a DataModule class that is used to prepare data for a PyTorch Lightning model. It initializes a tokenizer from a pretrained model, loads a dataset, tokenizes the data, and sets up the data for training and validation. It also prints the shape of the input_ids of the first batch of the training data."
week_1_wandb_logging/model.py,"This Python script defines a class called ColaModel which is used to create a model for sequence classification using the Transformers library. It imports the necessary libraries such as torch, wandb, numpy, pandas, pytorch_lightning, transformers, torchmetrics, sklearn, matplotlib, and seaborn. The class contains methods for forward propagation, training step, validation step, validation epoch end, and configure optimizers. It also contains metrics such as accuracy"
week_1_wandb_logging/train.py,"This Python script imports the torch, wandb, pandas, pytorch_lightning, and DataModule and ColaModel modules. It then creates a SamplesVisualisationLogger class to log wrong predictions from the validation set. The main() function creates a DataModule and ColaModel object, sets up a ModelCheckpoint, EarlyStopping, and WandbLogger callback, and then uses the pytorch_lightning Trainer to fit the model to the data"
week_1_wandb_logging/inference.py,"This Python script defines a class called ColaPredictor which takes a model path as an argument. It then loads the model from the checkpoint, sets it to evaluation mode, freezes it, and creates a DataModule object. The predict() method takes a text string as an argument, tokenizes it, and passes it to the model. The model then returns logits which are converted to a list of scores and labels. Finally, the list of scores and labels are returned as a prediction"
week_1_wandb_logging/data.py,"This Python script is a data module for a PyTorch Lightning project. It initializes a tokenizer from a pre-trained model, loads a dataset, tokenizes the data, and sets up the data for training and validation. It also prints the shape of the input_ids of the first batch of the training data."
week_7_ecr/inference_onnx.py,"This Python script is a class for predicting the acceptability of a sentence using an ONNX model. It imports the necessary libraries, defines the class, and initializes the class with the model path. The predict() method takes in a sentence, tokenizes it, runs it through the ONNX model, and returns a list of predictions with labels and scores. The main section of the script tests the predictor with a single sentence and then with a list of sentences."
week_7_ecr/model.py,"This Python script is for a ColaModel class which is a subclass of pytorch_lightning's LightningModule class. It imports various libraries such as torch, wandb, hydra, numpy, pandas, torchmetrics, pytorch_lightning, and transformers. It also imports OmegaConf, DictConfig, sklearn's confusion_matrix, matplotlib's pyplot, and seaborn. The class has an __init__ method which"
week_7_ecr/utils.py,This Python script is a decorator for timing functions. It uses the time module and the functools module to measure the time it takes for a function to execute. It prints out the name of the function and the time it took to execute. It then returns the result of the function.
week_7_ecr/train.py,"This Python script imports the necessary libraries for a sentiment analysis task, such as torch, hydra, wandb, and logging. It also imports pandas, pytorch_lightning, and omegaconf. It then defines a SamplesVisualisationLogger class, which is used to log the wrong predictions of the model. The main function is then defined, which sets up the data module, model, and trainer. The trainer is configured with a ModelCheckpoint, Samples"
week_7_ecr/app.py,"This Python script creates a web application using the FastAPI library. It also imports a ColaONNXPredictor class from the inference_onnx module. The application has two routes, one for the home page and one for making predictions. The prediction route takes a string as an argument and uses the predictor object to make a prediction based on the string. The result of the prediction is then returned."
week_7_ecr/inference.py,"This Python script is a class for predicting the acceptability of a sentence using a pre-trained ColaModel. It initializes the model, processor, and softmax, and labels. It also has a predict method which takes in a sentence, tokenizes it, and returns a list of predictions with labels and scores. The main section tests the predictor with a single sentence and then with a list of sentences."
week_7_ecr/convert_model_to_onnx.py,"This Python script imports the torch, hydra, and logging libraries, as well as the OmegaConf library. It then sets up a logger and defines a function, convert_model, which takes a configuration file as an argument. The function loads a pre-trained model from a checkpoint, prepares data, and sets up a data module. It then creates an input batch and sample, and exports the model in ONNX format. Finally, it prints a message indicating that the model has been converted"
week_7_ecr/data.py,"This Python script is a DataModule class that is used to prepare data for a PyTorch Lightning model. It initializes a tokenizer from a pretrained model, loads a dataset, tokenizes the data, and sets up the data in the correct format for training and validation. It also provides a train_dataloader and val_dataloader methods to return the data in the form of a DataLoader. Finally, it prints the shape of the input_ids of"
week_7_ecr/parse_json.py,"This code imports the json library and reads the contents of a file called creds.txt. It then prints the contents of the file, evaluates the contents, and prints the evaluated contents. Finally, it writes the evaluated contents to a file called test.json."
week_6_github_actions/inference_onnx.py,"This Python script is a class for predicting the acceptability of a sentence using an ONNX model. It imports the necessary libraries, defines the class, and initializes the class with the model path. The predict() method takes in a sentence, tokenizes it, runs it through the ONNX model, and returns a list of predictions with labels and scores. The main section of the script tests the predictor with a single sentence and then with a list of sentences."
week_6_github_actions/model.py,"This Python script is for a ColaModel class which is a subclass of pytorch_lightning's LightningModule class. It imports various libraries such as torch, wandb, hydra, numpy, pandas, torchmetrics, pytorch_lightning, and transformers. It also imports OmegaConf, DictConfig, sklearn's confusion_matrix, matplotlib's pyplot, and seaborn. The class has an __init__ method which"
week_6_github_actions/utils.py,This Python script is a decorator for timing functions. It uses the time module and the functools module to measure the time it takes for a function to execute. It prints out the name of the function and the time it took to execute. It then returns the result of the function.
week_6_github_actions/train.py,"This Python script imports the necessary libraries for a sentiment analysis task, such as torch, hydra, wandb, and logging. It also imports pandas, pytorch_lightning, and omegaconf. It then defines a SamplesVisualisationLogger class, which is used to log the wrong predictions of the model. The main function is then defined, which sets up the data module, model, and trainer. The trainer is configured with a ModelCheckpoint, Samples"
week_6_github_actions/app.py,"This Python script creates a web application using the FastAPI library. It also imports a ColaONNXPredictor class from the inference_onnx module. The application has two routes, one for the home page and one for making predictions. The prediction route takes a string as an argument and uses the predictor object to make a prediction based on the string. The result of the prediction is then returned."
week_6_github_actions/inference.py,"This Python script is a class for predicting the acceptability of a sentence using a pre-trained ColaModel. It initializes the model, processor, and softmax, and labels. It also has a predict method which takes in a sentence, tokenizes it, and returns a list of predictions with labels and scores. There is also a main method which tests the predictor with a single sentence and then with multiple sentences."
week_6_github_actions/convert_model_to_onnx.py,"This Python script imports the torch, hydra, and logging libraries, as well as the OmegaConf library. It then sets up a logger and defines a function, convert_model, which takes a configuration file as an argument. The function loads a pre-trained model from a checkpoint, prepares data, and sets up a data module. It then creates an input batch and sample, and exports the model in ONNX format. Finally, it prints a message indicating that the model has been converted"
week_6_github_actions/data.py,"This Python script is a DataModule class that is used to prepare data for a machine learning model. It imports the torch, datasets, and pytorch_lightning libraries, as well as the load_dataset and AutoTokenizer functions from the transformers library. The class takes in a model name, batch size, and max length as parameters and sets up the tokenizer. It then prepares the data by loading the cola dataset from the glue library and tokenizing it."
week_6_github_actions/parse_json.py,"This code imports the json library and reads the contents of a file called creds.txt. It then prints the contents of the file, evaluates the contents, and prints the evaluated contents. Finally, it writes the evaluated contents to a file called test.json."
