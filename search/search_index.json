{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"README-AI <p> Automated README file generator, powered by LLM APIs </p> <p> </p> <p> </p> <p> Objective      Readme-ai is a developer tool that auto-generates README.md files using a combination of data extraction and generative ai. Simply provide a repository URL or local path to your codebase and a well-structured and detailed README file will be generated for you.    Motivation      Streamlines documentation creation and maintenance, enhancing developer productivity. This project aims to enable all skill levels, across all domains, to better understand, use, and contribute to open-source software. </p>"},{"location":"cli/","title":"Running the CLI","text":""},{"location":"cli/#options","title":"Options","text":"Flag (Long/Short) Default Description Type Status <code>--align</code>/<code>-a</code> <code>center</code> Set header text alignment (<code>left</code>, <code>center</code>). String Optional <code>--api-key</code>/<code>-k</code> <code>OPENAI_API_KEY</code> env var Your GPT model API key. String Optional <code>--badges</code>/<code>-b</code> <code>default</code> Badge style options for your README file. String Optional <code>--emojis</code>/<code>-e</code> <code>False</code> Add emojis to section header tiles. Boolean Optional <code>--image</code>/<code>-i</code> <code>default</code> Project logo image displayed in README header. String Optional <code>--max-tokens</code> <code>3899</code> Max number of tokens that can be generated. Integer Optional <code>--model</code>/<code>-m</code> <code>gpt-3.5-turbo</code> Select GPT model for content generation. String Optional <code>--offline</code> <code>False</code> Generate a README without an API key. Boolean Optional <code>--output</code>/<code>-o</code> <code>readme-ai.md</code> README output file name. Path/String Optional <code>--repository</code>/<code>-r</code> None Repository URL or local path. URL/String Required <code>--temperature</code>/<code>-t</code> <code>0.8</code> LLM API creativity level. Float Optional <code>--template</code> None Choose README template. String WIP <code>--language</code>/<code>-l</code> <code>English (en)</code> Language for content. String WIP <p><sub>WIP = work in progress, or feature currently under development.For additional command-line information, run <code>readmeai --help</code> in your terminal for more details about each option.</sub></p>"},{"location":"cli/#badges","title":"Badges","text":"<p>Select your preferred badge icon style to display in your output file using the <code>--badges</code> flag. The default badge style displays basic metadata about your repository using shields.io badges. If you select another option, the <code>default</code> badges will be automatically included.</p> Options Preview <code>default</code> <code>flat</code> <code>flat-square</code> <code>for-the-badge</code> <code>plastic</code> <code>skills</code> <code>skills-light</code> <code>social</code>"},{"location":"cli/#project-logo","title":"Project Logo","text":"<p>Select an image to display in your README header section using the <code>--image</code> flag.</p> Options Preview default black gradient grey purple yellow cloud <p>To provide your own image, use the CLI option <code>--image custom</code> and you will be prompted to enter a URL to your image.</p>"},{"location":"concepts/","title":"Core Concepts","text":""},{"location":"concepts/#concepts","title":"Concepts","text":"<p>The readme-ai CLI tool provides several configurations that control how it operates and generates README.md files. We will explore these configurations and settings in detail in this document.</p>"},{"location":"concepts/#core-components","title":"Core Components","text":"<p>At the heart of the readme-ai CLI tool lies the main <code>AppConfig</code> class, responsible for storing all configuration settings related to the CLI. Additionally, there is a nested <code>AppConfigModel</code> class that extends Pydantic's <code>BaseModel</code> to add validation capabilities.</p>"},{"location":"concepts/#appconfig","title":"AppConfig","text":"<p>The <code>AppConfig</code> class stores primary configuration categories, namely <code>cli</code>, <code>files</code>, <code>git</code>, <code>llm</code>, <code>md</code>, and <code>prompts</code>. Each category contains specific settings controlling various parts of the tool. Let's discuss each category individually.</p>"},{"location":"concepts/#cli","title":"Cli","text":"<p>The <code>cli</code> category holds boolean settings related to the CLI itself, primarily <code>emojis</code> and <code>offline</code>. The <code>emojis</code> flag determines whether emojis appear alongside the section titles within the README.md file. Meanwhile, activating the <code>offline</code> flag enables the generation of a README.md file without requiring API calls, providing placeholders where LLM-generated content would normally go.</p>"},{"location":"concepts/#files","title":"Files","text":"<p>The <code>files</code> category manages various file paths used in the application. Specific properties include <code>dependency_files</code>, <code>identifiers</code>, <code>ignore_files</code>, <code>language_names</code>, <code>language_setup</code>, <code>output</code>, <code>shields_icons</code>, and <code>skill_icons</code>. All these fields hold either absolute file paths or relative references to files managed by the application.</p>"},{"location":"concepts/#git","title":"Git","text":"<p>The <code>git</code> category captures the necessary repository settings, ensuring correct interaction between the readme-ai CLI tool and the target repository. Properties consist of <code>repository</code>, <code>full_name</code>, <code>host</code>, <code>name</code>, and <code>source</code>. The latter three optional fields get populated during validation performed by the <code>RepositoryValidator</code> class.</p>"},{"location":"concepts/#llm","title":"Llm","text":"<p>The <code>llm</code> category houses settings pertinent to the LLM API employed by the tool. Fields like <code>content</code>, <code>endpoint</code>, <code>encoding</code>, <code>model</code>, <code>temperature</code>, <code>tokens</code>, <code>tokens_max</code>, and <code>rate_limit</code> define the behavior of the LLM API during execution.</p>"},{"location":"concepts/#md","title":"Md","text":"<p>The <code>md</code> category groups together Markdown template blocks utilized in constructing the final README.md file. Examples include <code>align</code>, <code>default</code>, <code>badge_color</code>, <code>badge_style</code>, <code>badges_software</code>, <code>badges_shields</code>, <code>badges_skills</code>, <code>contribute</code>, <code>features</code>, <code>header</code>, <code>image</code>, <code>modules</code>, <code>modules_widget</code>, <code>overview</code>, <code>quickstart</code>, <code>slogan</code>, <code>tables</code>, <code>toc</code>, <code>tree</code>, among others.</p>"},{"location":"concepts/#prompts","title":"Prompts","text":"<p>Finally, the <code>prompts</code> category maintains the prompt templates critical in generating appropriate text for the README.md file. Included fields cover <code>features</code>, <code>overview</code>, <code>slogan</code>, and <code>summaries</code>.</p>"},{"location":"concepts/#config-helper","title":"Config Helper","text":"<p>The <code>ConfigHelper</code> class plays a crucial role as a helper module for managing extra configuration files beyond the primary <code>AppConfigModel</code>. Using a secondary <code>FileHandler</code> object, the <code>ConfigHelper</code> loads multiple configuration files simultaneously, merging them seamlessly into the existing configuration hierarchy.</p>"},{"location":"concepts/#dependency-files","title":"Dependency Files","text":"<p>Dependency files referenced within the <code>dependency_files</code> property indicate external configuration files holding important values affecting the overall behavior of the readme-ai CLI tool. When present, the <code>ConfigHelper</code> consolidates these dependencies within a dedicated field called <code>dependency_files</code>.</p>"},{"location":"concepts/#ignore-files","title":"Ignore Files","text":"<p>Similarly, ignore files listed in the <code>ignore_files</code> property specify particular patterns matching files to exclude during certain operations carried out by the readme-ai CLI tool. Analogous to the <code>dependency_files</code> treatment, <code>ignore_files</code> gets combined into a corresponding field within the <code>ConfigHelper</code> class.</p>"},{"location":"concepts/#language-names","title":"Language Names","text":"<p><code>language_names</code> consists of mappings associating specific programming languages with human-friendly labels presented in the README.md file. For instance, a label such as \"Python\" could correspond to the programming language identifier \"py\".</p>"},{"location":"concepts/#language-setup","title":"Language Setup","text":"<p>Lastly, <code>language_setup</code> comprises instructions describing how to initialize diverse environments supporting various programming languages. By combining these directives, developers can effortlessly prepare suitable platforms for executing code samples featured in the README.md file.</p>"},{"location":"concepts/#validators","title":"Validators","text":"<p>Validators serve as specialized utility functions tasked with verifying consistency across distinct elements comprising the larger configuration schema. They perform checks ranging from presence confirmation to compatibility assessment, guaranteeing reliable interactions amongst interconnected entities.</p>"},{"location":"concepts/#repositoryvalidator","title":"RepositoryValidator","text":"<p>One prominent validator is the <code>RepositoryValidator</code> class, responsible for examining fundamental attributes linked to a given repository. Notably, it ensures correct population of fields like <code>full_name</code>, <code>host</code>, <code>name</code>, and <code>source</code> depending on the supplied <code>repository</code> value. Furthermore, the <code>RepositoryValidator</code> performs mandatory sanity checks concerning the availability and accessibility of the designated repository prior to proceeding with subsequent stages of the configuration process.</p>"},{"location":"concepts/#enums","title":"Enums","text":"<p>Enums, short for enumerations, constitute a collection of symbolic names representing distinct constant values. Within the readme-ai CLI tool, enums play an integral part in standardizing choices offered to end-users interacting with the CLI. Three notable enums stand out:</p>"},{"location":"concepts/#gitservice","title":"GitService","text":"<p><code>GitService</code> offers a concise means of specifying popular Git hosting services utilizing descriptive terms familiar to most developers. Supported options include Local, GitHub, GitLab, and Bitbucket.</p>"},{"location":"concepts/#badgeoptions","title":"BadgeOptions","text":"<p><code>BadgeOptions</code> presents a range of possible styles applicable to README.md file badges. Choices vary from plain representations to visually rich alternatives adorned with gradients and borders.</p>"},{"location":"concepts/#imageoptions","title":"ImageOptions","text":"<p>Lastly, <code>ImageOptions</code> delineates an array of plausible project logo candidates, facilitating easy selection of appealing visual assets accompanying the README.md file header. Users enjoy the convenience of choosing between preset imagery or supplying custom URLs pointing towards alternative logos.</p>"},{"location":"configuration/","title":"Configuration Models and Enums","text":"<p>This page documents the data models and enums used for configuring the <code>readme-ai</code> CLI tool. These models are based on Pydantic, which allows for data parsing and validation through Python type annotations.</p>"},{"location":"configuration/#git-settings","title":"Git Settings","text":"<p><code>GitSettings</code> is used to represent and validate repository settings.</p>"},{"location":"configuration/#fields","title":"Fields","text":"<ul> <li><code>repository</code>: A string or <code>Path</code> representing the location of the repository.</li> <li><code>full_name</code>: An optional string denoting the full name of the repository in 'username/repo' format.</li> <li><code>host</code>: An optional string representing the Git service host.</li> <li><code>name</code>: An optional string for the repository name.</li> <li><code>source</code>: An optional string representing the source Git service.</li> </ul>"},{"location":"configuration/#validators","title":"Validators","text":"<p>Custom validators are used to ensure that the repository information is correct and that the <code>full_name</code>, <code>host</code>, <code>name</code>, and <code>source</code> fields are derived correctly from the <code>repository</code> field.</p>"},{"location":"configuration/#cli-settings","title":"CLI Settings","text":"<p><code>CliSettings</code> manages the command-line interface options for the <code>readme-ai</code> application.</p>"},{"location":"configuration/#fields_1","title":"Fields","text":"<ul> <li><code>emojis</code>: A boolean indicating whether to use emojis.</li> <li><code>offline</code>: A boolean specifying if the tool should run in offline mode.</li> </ul>"},{"location":"configuration/#file-settings","title":"File Settings","text":"<p><code>FileSettings</code> defines paths related to different configurations and output.</p>"},{"location":"configuration/#fields_2","title":"Fields","text":"<ul> <li><code>dependency_files</code>: The path to the file containing dependency configurations.</li> <li><code>identifiers</code>: The path to the file with identifiers.</li> <li><code>ignore_files</code>: The path to the file listing files to ignore.</li> <li><code>language_names</code>: The path to the file with language names mapping.</li> <li><code>language_setup</code>: The path to the file with language setup instructions.</li> <li><code>output</code>: The path for the output file (e.g., <code>README.md</code>).</li> <li><code>shields_icons</code>: The path to the file with shield icon configurations.</li> <li><code>skill_icons</code>: The path to the file with skill icon configurations.</li> </ul>"},{"location":"configuration/#enums","title":"Enums","text":"<p>The application uses several <code>Enum</code> classes to represent various configurations.</p>"},{"location":"configuration/#gitservice","title":"GitService","text":"<p><code>GitService</code> is an enum that includes:</p> <ul> <li><code>LOCAL</code>: Local repository.</li> <li><code>GITHUB</code>: GitHub repository.</li> <li><code>GITLAB</code>: GitLab repository.</li> <li><code>BITBUCKET</code>: Bitbucket repository.</li> </ul> <p>Each service has properties for <code>api_url</code> and <code>file_url_template</code> to facilitate integration with the respective Git service.</p>"},{"location":"configuration/#badgeoptions","title":"BadgeOptions","text":"<p><code>BadgeOptions</code> represents the available styles for badges in the README files, such as:</p> <ul> <li><code>DEFAULT</code></li> <li><code>FLAT</code></li> <li><code>FLAT_SQUARE</code></li> <li><code>FOR_THE_BADGE</code></li> <li><code>PLASTIC</code></li> <li><code>SKILLS</code></li> <li><code>SKILLS_LIGHT</code></li> <li><code>SOCIAL</code></li> </ul>"},{"location":"configuration/#imageoptions","title":"ImageOptions","text":"<p><code>ImageOptions</code> enumerates the available choices for images used in the README header, including:</p> <ul> <li><code>CUSTOM</code></li> <li><code>DEFAULT</code></li> <li><code>BLACK</code></li> <li><code>GREY</code></li> <li><code>PURPLE</code></li> <li><code>YELLOW</code></li> <li><code>CLOUD</code></li> </ul>"},{"location":"contributing/","title":"Contributing Guidelines","text":"<p>Thanks for your interest in contributing to readme-ai. Please review these guidelines to ensure a smooth process.</p>"},{"location":"contributing/#make-valuable-contributions","title":"Make Valuable Contributions","text":"<p>Strive to make useful, creative, and high quality contributions.</p> <p>Useful: Solve common problems, use cases, exceptions, or issues.</p> <p>Creative: Innovative and helping us all learn new things.</p> <p>High Quality: Well-written, structured, and explained.</p>"},{"location":"contributing/#follow-the-code-of-conduct","title":"Follow The Code of Conduct","text":"<p>Review and adhere to our CODE_OF_CONDUCT</p>"},{"location":"contributing/#ways-to-contribute","title":"Ways to Contribute","text":"<p>There are many ways to contribute to readme-ai. Here are a few ideas to get you started:</p> <ul> <li>Simply start a discussion by asking a question or making a suggestion.</li> <li>Look for opportunities to make processes more efficient to improve the user experience.</li> <li>Find ways to make code more readable and easier to understand.</li> <li>Find unhandled exceptions and bugs when running the program.</li> <li>Write unit test for the program.</li> <li>Brainstorm new CLI options and features that would be useful to users.</li> <li>i.e. <code>--language</code> option to specify the language of the README.</li> <li>What is the best way to implement README file generation in any language selected?</li> </ul> <p>These are just a few examples, there are many more ways to contribute to readme-ai!</p>"},{"location":"contributing/#submitting-changes","title":"Submitting Changes","text":"<ol> <li>Fork the repository and clone it locally.</li> <li>Create a new branch with a descriptive name i.e <code>feature/new-feature-name</code> or <code>bugfix-issue-123</code>.</li> <li>Make focused changes with clear commits.</li> <li>Open a pull request document the changes you've made and why they're necessary.</li> <li>Respond to code reviews from maintainers.</li> </ol>"},{"location":"contributing/#code-quality-expectations","title":"Code Quality Expectations","text":"<ul> <li>Clear, well-documented code</li> <li>Include tests for new code</li> <li>Follow project style standards</li> <li>Rebase onto latest main branch</li> </ul>"},{"location":"contributing/#attribution","title":"Attribution","text":"<p>Contributors to our project will be acknowledged in the project's README.md file and AUTHORS.md file.</p>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to our project, you agree to license your contributions under the project's open source license. The project's license can be found in the LICENSE</p> <p>Thank you for contributing to our project!</p>"},{"location":"examples/","title":"Example READMEs","text":"<p>Explore example README.md files generated by readme-ai below.</p> \u2b51 Output File Input Repository Repository Type \u2b51 readme-python.md readme-ai Python \u2b51 readme-typescript.md chatgpt-app-react-ts TypeScript, React \u2b51 readme-postgres.md postgres-proxy-server Postgres, Duckdb \u2b51 readme-kotlin.md file.io-android-client Kotlin, Android \u2b51 readme-streamlit.md readme-ai-streamlit Python, Streamlit \u2b51 readme-rust-c.md rust-c-app C, Rust \u2b51 readme-go.md go-docker-app Go \u2b51 readme-java.md java-minimal-todo Java \u2b51 readme-fastapi-redis.md async-ml-inference FastAPI, Redis \u2b51 readme-mlops.md mlops-course Python, Jupyter \u2b51 readme-pyflink.md flink-flow PyFlink \u2b51 readme-gitlab.md gitlab GitLab \u2b51 readme-bitbucket.md bitbucket BitBucket \u2b51 readme-local.md filesystem Filesystem"},{"location":"features/","title":"Features","text":"<p>Built with flexibility in mind, readme-ai allows users to customize various aspects of the README using CLI options and configuration settings. Content is generated using a combination of data extraction and making a few calls to LLM APIs.</p> <p>Currently, readme-ai uses generative ai to create four sections of the README file.</p> <ul> <li>Header: Project slogan that describes the repository in an engaging way.</li> <li>Overview: Provides an intro to the project's core use-case and value proposition.</li> <li>Features: Markdown table containing details about the project's technical components.</li> <li>Modules: Codebase file summaries are generated and formatted into markdown tables.</li> </ul> <p>All other content is extracted from processing and analyzing repository metadata and files.</p>"},{"location":"features/#customizable-header","title":"Customizable Header","text":"<p>The header section is built using repository metadata and CLI options. Key features include: - Badges: Svg icons that represent codebase metadata, provided by shields.io and skill-icons. - Project Logo: Select a project logo image from the base set or provide your image. - Project Slogan: Catch phrase that describes the project, generated by generative ai. - Table of Contents/Quick Links: Links to the different sections of the README file.</p> <p>See a few examples headers generated by readme-ai below.</p> <code>default output (no options provided to cli)</code> <code>--align left --badges flat-square --image cloud</code> <code>--align left --badges flat --image gradient</code> <code>--badges flat --image custom</code> <code>--badges skills-light --image grey</code> <code>--badges flat-square</code> <code>--badges flat --image black</code> <p>See the Configuration section below for the complete list of CLI options and settings.</p>"},{"location":"features/#codebase-summaries","title":"Codebase Summaries","text":"Repository Structure <p>A directory tree structure is created and displayed in the README. Implemented using pure Python (tree.py).</p> Codebase Summaries <p>File summaries generated using LLM APIs, and are formatted and grouped by directory in markdown tables.</p>"},{"location":"features/#overview-and-features","title":"Overview and Features","text":"<p>The overview and features sections are generated using OpenAI's API. Structured prompt templates are injected with repository metadata to help produce more accurate and relevant content.</p> Overview <p>High-level introduction of the project, focused on the value proposition and use-cases, rather than technical aspects.</p> Features Table <p>Describes technical components of the codebase, including architecture, dependencies, testing, integrations, and more.</p>"},{"location":"features/#quick-start","title":"Quick Start","text":"Getting Started or Quick Start <p>Generates structured guides for installing, running, and testing your project. These steps are created by identifying dependencies and languages used in the codebase, and mapping this data to configuration files such as the language_setup.toml file.</p>"},{"location":"features/#contributing-guidelines-more","title":"Contributing Guidelines &amp; More","text":"Additional Sections <p>The remaining README sections are built from a baseline template that includes common sections such as <code>Project Roadmap, Contributing Guidelines, License, and Acknowledgements</code>.</p> Contributing Guidelines <p>The contributing guidelines has a dropdown that outlines a general process for contributing to your project.</p>"},{"location":"features/#template-readmes","title":"Template READMEs","text":"<p>This feature is currently under development. The template system will allow users to generate README files in different flavors, such as ai, data, web development, etc.</p> README Template for ML &amp; Data <ul> <li>Overview: Project objectives, scope, outcomes.</li> <li>Project Structure: Organization and components.</li> <li>Data Preprocessing: Data sources and methods.</li> <li>Feature Engineering: Impact on model performance.</li> <li>Model Architecture: Selection and development strategies.</li> <li>Training: Procedures, tuning, strategies.</li> <li>Testing and Evaluation: Results, analysis, benchmarks.</li> <li>Deployment: System integration, APIs.</li> <li>Usage and Maintenance: User guide, model upkeep.</li> <li>Results and Discussion: Implications, future work.</li> <li>Ethical Considerations: Ethics, privacy, fairness.</li> <li>Contributing: Contribution guidelines.</li> <li>Acknowledgements: Credits, resources used.</li> <li>License: Usage rights, restrictions.</li> </ul>"},{"location":"how-it-works/","title":"How It Works","text":"<p>The steps below outline the process of generating a README using the CLI.</p> <ol> <li>The user provides a GitHub repository URL to the CLI.</li> <li>The input is sanitized and validated.</li> <li>The codebase is cloned into the temporary directory.</li> <li>Each file in the codebase is parsed and metadata is extracted.</li> <li>The metadata is injected into prompt templates and sent to OpenAI's API.</li> <li>The generated content is injected into markdown code blocks and written to the README.</li> </ol> <p>The diagram below shows the high-level architecture of the project.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#pip","title":"Pip","text":"<pre><code>pip install readmeai\n</code></pre>"},{"location":"installation/#docker","title":"Docker","text":"<pre><code>docker pull zeroxeli/readme-ai:latest\n</code></pre>"},{"location":"installation/#conda","title":"Conda","text":"<pre><code>conda install -c conda-forge readmeai\n</code></pre>"},{"location":"installation/#from-source","title":"From Source","text":"<p>Alternatively, clone the <code>readme-ai</code> repository and install the project's dependencies.</p> <ol> <li>Clone the repository</li> </ol> <pre><code>git clone https://github.com/eli64s/readme-ai\n</code></pre> <ol> <li>Change directory</li> </ol> <pre><code>cd readme-ai\n</code></pre> <ol> <li>Install dependencies and activate virtual environment (Bash, Pipenv, or Poetry).</li> </ol> <p>Using <code>bash</code></p> <pre><code>bash setup/setup.sh\n</code></pre> <p>Using <code>pipenv</code></p> <pre><code>pipenv install &amp;&amp; \\\npipenv shell\n</code></pre> <p>Using <code>poetry</code></p> <pre><code>poetry install &amp;&amp; \\\npoetry shell\n</code></pre>"},{"location":"prerequisites/","title":"Prerequisites","text":""},{"location":"prerequisites/#dependencies","title":"Dependencies","text":"<ul> <li>Python: <code>3.9</code> or higher</li> <li>Package manager or container runtime: <code>pip</code> or <code>docker</code> recommended.</li> <li>OpenAI API account and API key (other providers coming soon)</li> </ul>"},{"location":"prerequisites/#repository","title":"Repository","text":"<p>A repository URL or local path to your codebase is required run readme-ai. The following are supported:</p> <ul> <li>GitHub</li> <li>GitLab</li> <li>Bitbucket</li> <li>File System</li> </ul>"},{"location":"prerequisites/#llm-api-key","title":"LLM API Key","text":"<p>An OpenAI API account and API key are needed to use readme-ai. The following steps outline the process.</p> \ud83d\udd10 OpenAI API Account Setup <ol> <li>Go to the OpenAI website.</li> <li>Click the \"Sign up for free\" button.</li> <li>Fill out the registration form with your information and agree to the terms of service.</li> <li>Once logged in, click on the \"API\" tab.</li> <li>Follow the instructions to create a new API key.</li> <li>Copy the API key and keep it in a secure place.</li> </ol>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#llm-api-key","title":"LLM API Key","text":"<p>Before running the application, ensure you have an OpenAI API key and its set as an environment variable.</p> <p>On <code>Linux</code> or <code>MacOS</code></p> <pre><code>$ export OPENAI_API_KEY=YOUR_API_KEY\n</code></pre> <p>On <code>Windows</code></p> <pre><code>$ set OPENAI_API_KEY=YOUR_API_KEY\n</code></pre>"},{"location":"usage/#command-line-interface","title":"Command Line Interface","text":"<p>Use one of the methods below to run the application (Pip, Docker, Conda, Streamlit, etc).</p>"},{"location":"usage/#pypi","title":"PyPI","text":"<pre><code>readmeai --repository https://github.com/eli64s/readme-ai\n</code></pre>"},{"location":"usage/#docker","title":"Docker","text":"<pre><code>docker run -it \\\n-e OPENAI_API_KEY=$OPENAI_API_KEY \\\n-v \"$(pwd)\":/app zeroxeli/readme-ai:latest \\\n-r https://github.com/eli64s/readme-ai\n</code></pre>"},{"location":"usage/#conda","title":"Conda","text":"<pre><code>readmeai -r https://github.com/eli64s/readme-ai\n</code></pre>"},{"location":"usage/#from-source","title":"From Source","text":"<p>Alternatively, clone the repository and run the application from source.</p> <p>Using <code>pipenv</code></p> <pre><code>pipenv shell &amp;&amp; \\\npython3 -m readmeai.cli.commands -o readme-ai.md -r https://github.com/eli64s/readme-ai\n</code></pre> <p>Using <code>poetry</code></p> <pre><code>poetry shell &amp;&amp; \\\npoetry run python3 -m readmeai.cli.commands -o readme-ai.md -r https://github.com/eli64s/readme-ai\n</code></pre>"},{"location":"usage/#web-application","title":"Web Application","text":""},{"location":"usage/#streamlit","title":"Streamlit","text":"<p>Use readme-ai directly in your browser via Streamlit Community Cloud, no installation required!</p> <p></p> <p><sub>     Web app may be unavailable at times as its hosted for free. See the readme-ai-streamlit repository for more details. </sub></p>"},{"location":"usage/#testing","title":"Testing","text":"<p>Use <code>pytest</code> to run the default test suite.</p> <pre><code>make test\n</code></pre> <p>Use <code>nox</code> to run the test suite against multiple Python versions including <code>(3.9, 3.10, 3.11, 3.12)</code>.</p> <pre><code>nox -f noxfile.py\n</code></pre>"}]}